# -*- coding: utf-8 -*-
"""Tugas04_SEIR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VaVupDvQHgqWaghzLgR1qBI7ErXsI5am
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Definisikan parameter
beta = 0.4  # Laju penularan (probabilitas kontak yang mengarah pada infeksi)
sigma = 1/4.5  # Laju perubahan dari terpapar ke terinfeksi (1/latensi)
gamma = 1/10  # Laju pemulihan (1/masa pemulihan)

# Definisikan fungsi sistem persamaan diferensial untuk SEIR
def model_SEIR(y, t, beta, sigma, gamma):
    S, E, I, R = y
    dSdt = -beta * S * I  # Perubahan jumlah orang rentan
    dEdt = beta * S * I - sigma * E  # Perubahan jumlah orang yang terpapar
    dIdt = sigma * E - gamma * I  # Perubahan jumlah orang yang terinfeksi
    dRdt = gamma * I  # Perubahan jumlah orang yang sembuh
    return [dSdt, dEdt, dIdt, dRdt]

# Kondisi awal
S0 = 0.99  # Proporsi populasi yang rentan (99%)
E0 = 0.01  # Proporsi populasi yang terpapar (1%)
I0 = 0.0   # Proporsi populasi yang terinfeksi (0%)
R0 = 0.0   # Proporsi populasi yang pulih (0%)

# Waktu simulasi (dalam hari)
t = np.linspace(0, 160, 160)  # 160 hari

# Solusi ODE
result = odeint(model_SEIR, [S0, E0, I0, R0], t, args=(beta, sigma, gamma))

# Ambil hasil S, E, I, R dari hasil integrasi
S, E, I, R = result.T

# Plot hasil
plt.figure(figsize=(10,6))
plt.plot(t, S, label='Susceptible (S)', color='blue')
plt.plot(t, E, label='Exposed (E)', color='orange')
plt.plot(t, I, label='Infected (I)', color='red')
plt.plot(t, R, label='Recovered (R)', color='green')
plt.xlabel('Waktu (Hari)')
plt.ylabel('Proporsi dari populasi')
plt.title('Model SEIR')
plt.legend()
plt.grid(True)
plt.show()

"""M0del SEIR dengan Kelahiran dan kematian_Penyebaran Tifus"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Definisi parameter
Lambda = 0.01   # Laju kelahiran
mu = 0.005      # Laju kematian alami
beta = 0.3      # Laju transmisi infeksi
sigma = 0.2     # Laju individu dari E ke I
gamma = 0.1     # Laju pemulihan
delta = 0.05    # Laju kematian akibat tifus

# Sistem persamaan diferensial
def seir_model(y, t, Lambda, mu, beta, sigma, gamma, delta):
    S, E, I, R = y
    dSdt = Lambda - beta * S * I - mu * S
    dEdt = beta * S * I - sigma * E - mu * E
    dIdt = sigma * E - (gamma + delta + mu) * I
    dRdt = gamma * I - mu * R
    return [dSdt, dEdt, dIdt, dRdt]

# Kondisi awal
S0 = 0.9  # 90% populasi rentan
E0 = 0.05 # 5% populasi terpapar
I0 = 0.05 # 5% populasi terinfeksi
R0 = 0    # 0% populasi sembuh

# Waktu simulasi
t = np.linspace(0, 200, 1000) # 200 hari

# Simulasi ODE
sol = odeint(seir_model, [S0, E0, I0, R0], t, args=(Lambda, mu, beta, sigma, gamma, delta))
S, E, I, R = sol.T

# Plot hasil
plt.figure(figsize=(10,6))
plt.plot(t, S, 'b', label='Susceptible (S)')
plt.plot(t, E, 'orange', label='Exposed (E)')
plt.plot(t, I, 'r', label='Infected (I)')
plt.plot(t, R, 'g', label='Recovered (R)')
plt.xlabel('Waktu (hari)')
plt.ylabel('Proporsi Populasi')
plt.title('Model SEIR dengan Kelahiran dan Kematian - Penyebaran Tifus')
plt.legend()
plt.grid()
plt.show()

# Menghitung bilangan reproduksi dasar R0
R0_value = beta / (gamma + delta + mu)
print(f'Bilangan Reproduksi Dasar (R0) = {R0_value:.2f}')